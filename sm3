#!/usr/bin/env python3

#coding:utf-8

def Fill(text):
  
    text_bin = ''
    # text to bin
    for ch in text:
        if ch.isalpha() ==1:
            ascii_ch = ord(ch)
            text_bin = text_bin + '0' + bin(ascii_ch)[2:]
        else:
            text_bin = text_bin+ch
    # add 1
    length = len(text_bin)

    text_bin = text_bin + '1'

    # add 0
    while len(text_bin)%512!=448:
        text_bin += '0'
    length_bin = bin(length)[2:]
    while len(length_bin)<64:
            length_bin = '0' + length_bin
    text_bin = text_bin + length_bin
    return text_bin

  
def Fill2(text1,text2):#c+padding+c_2+padding+len(c+c_2)
    text_bin2 = ''
    text_bin1 = ''
    # text to bin
    for ch1 in text1:
        ascii_ch1 = ord(ch1)
        text_bin1 = text_bin1 + '0' + bin(ascii_ch1)[2:]
    for ch2 in text2:
        ascii_ch2 = ord(ch2)
        text_bin2 = text_bin2 + '0' + bin(ascii_ch2)[2:]

    # add 1
    length1=len(Fill(text1))
    length = len(text_bin2)+length1
    text_bin2 = text_bin2 + '1'
    
    # add 0
    while len(text_bin2)%512!=448:
        text_bin2 += '0'
 
    length_bin = bin(length)[2:]

    while len(length_bin)<64:
        length_bin = '0' + length_bin

    text_bin2 = text_bin2 + length_bin

    return text_bin2


def Iteration(m,w):

    IV = {}
    IV[0] = '7380166f4914b2b9172442d7da8a0600a96f30bc163138aae38dee4db0fb0e4e'
    length = len(m)
    n = length//512
    b = {}
    for i in range(n):
        b[i] = m[512*i:512*(i+1)]
        w = Expand(b[i])
        IV[i+1] = Compress(w,IV[i])
    return IV[n]



def Mod32(a,b):
  
    c = (a + b)
    d = c%(2**32)
    ans = str(d)
    return ans



def Move(text, num):
 
    text = str(text)
    return (text[num:] + text[:num])



def Xor(a,b):
  
    result =''
    if len(a)!=len(b):
        print('len(a)!=len(b)')
        return False
    for i in range(len(a)):
        if a[i]==b[i]:
            result += '0'
        else:
            result += '1'
    return result


def Xor3(a,b,c):
  
    return Xor(Xor(a,b),c)


def Or(a,b):
  
    result =''
    if len(a)!=len(b):
        print('len(a)!=len(b)')
        return False
    for i in range(len(a)):
        if (a[i]=='1')|(b[i]=='1'):
            result += '1'
        else:
            result += '0'
    return result

def Or3(a,b,c):
    return Or(Or(a,b),c)


def And(a,b):
  
    result =''
    if len(a)!=len(b):
        print('len(a)!=len(b)')
        return False
    for i in range(len(a)):
        if (a[i]=='1')&(b[i]=='1'):
            result += '1'
        else:
            result += '0'
    return result

def And3(a,b,c):
    return And(And(a,b),c)


def Not(a):
  
    result = ''
    for ch in a:
        if ch == '1':
            result = result + '0'
        else:
            result = result + '1'
    return result



def Substitute(x, mode):
 
    if mode == 0:
        ans = Xor3(x,Move(x,9),Move(x,17))
    else:
        ans = Xor3(x,Move(x,15),Move(x,23))
    return ans


def ZtoH(text):
 
    text = str(text)
    while len(text)<32:
        text = '0' + text
    text_16 = ''
    for i in range(8):
        tmp = hex(int(text[4*i:4*(i+1)],base = 2))[2:]
        text_16 = text_16 + tmp   
    return text_16

def BtoH(text):
    text = str(text)
    while len(text)<32:
        text = '0' + text
    text_16 = ''
    for i in range(len(text)//4):
        tmp = hex(int(text[4*i:4*(i+1)],base = 2))[2:]
        text_16 = text_16 + tmp
    return text_16

# 16->2
def HtoB(text):
    text_2 = ''
    text = str(text)
    for ch in text:
        tmp = bin(int(ch,base = 16))[2:]
        for i in range(4):
            if len(tmp)%4!=0:
                tmp = '0' + tmp
        text_2 = text_2 + tmp   
    while len(text_2)<32:
        text_2 = '0' + text_2      
    return text_2

# 10->2
def OtoB(text):
    text_10 = ''
    text = str(text)
    tmp = bin(int(text,base = 10))[2:]
    text_10 = text_10 + tmp  
    while len(text_10)<32:
        text_10 = '0' + text_10      
    return text_10

def OtoH(text):
    text_10 = ''
    text = str(text)
    tmp = hex(int(text ,base = 10))[2:]
    text_10 = text_10 + tmp     
    while len(text_10)<8:
        text_10 = '0' + text_10   
    return text_10



def Expand(b):
 
    w = {}
    for i in range(16):
        w[i] = b[i*32:(i+1)*32]
    for j in range(16, 68):
        tmp = Xor3(w[j-16],w[j-9],Move(w[j-3],15))
        tmp = Substitute(tmp, 1) 
        w[j] = Xor3(tmp, Move(w[j-13],7), w[j-6])
    for j in range(64):
        w[j+68] = Xor(w[j],w[j+4])
    for i in w:
        w[i] = ZtoH(w[i])
    return w



def FF(x,y,z,j):
    if((j>=0)&(j<=15)):
        ans = Xor3(x,y,z)
    else:
        ans = Or3(And(x,y),And(x,z),And(y,z))
    return ans


def GG(x,y,z,j):
    if((j>=0)&(j<=15)):
        ans = Xor3(x,y,z)
    else:
        ans = Or(And(x,y),And(Not(x),z))
    return ans



def Compress(w,IV):
  
    A = IV[0:8]
    B = IV[8:16]
    C = IV[16:24]
    D = IV[24:32]
    E = IV[32:40]
    F = IV[40:48]
    G = IV[48:56]
    H = IV[56:64]

    SS1 = ''
    SS2 = ''
    TT1 = ''
    TT2 = ''
    
    for j in range(64):
        if int(j)<=15:
            T = '79cc4519' 
        else:
            T = '7a879d8a'

        tmp = int(Move(HtoB(A),12), 2) + int(HtoB(E), 2) + int(Move(HtoB(T),j%32), 2) 
        tmp = Mod32(tmp, 0)
        SS1 = Move(OtoB(tmp), 7)
        SS2 = Xor(SS1, Move(HtoB(A),12))


        tmp = int(FF(HtoB(A),HtoB(B),HtoB(C),j),2) + int(HtoB(D),2) + int(SS2,2) + int(HtoB(w[j+68]),2)
        tmp = Mod32(tmp,0)
        TT1 = int(tmp,10)


        tmp = int(GG(HtoB(E),HtoB(F),HtoB(G),j),2) + int(HtoB(H),2) + int(SS1,2) + int(HtoB(w[j]),2)
        tmp = Mod32(tmp,0)
        TT2 = int(tmp,10)

        D = C

        C = ZtoH(Move(HtoB(B),9))

        B = A

        A = OtoH(TT1)

        H = G

        G = ZtoH(Move(HtoB(F),19))

        F = E

        E = ZtoH(Substitute(OtoB(TT2),0))

    r = A+B+C+D+E+F+G+H
    r = HtoB(r)
    v = HtoB(IV)
    return BtoH(Xor(r,v))


if __name__ == "__main__":
    c = 'abc' 
    c_2='defj'
    
    m = Fill(c)
    m_2=Fill2(c,c_2)
    
    c_3=m+c_2
    
    w = Expand(m)
    h_1 = Iteration(m,w)

    w_2=Expand(m_2)
    h_2=Iteration(w_2,h_1) #SM3(c_2,SM3(IV,c))
    
    m_3=Fill(c_3)
    w_3=Expand(m_3)
    h_3=Iteration(w_3,m_3)  #SM3(c+padding+c_2,IV)
    
    print("SM3(c_2,SM3(IV,c)): ",h_2)
    print("SM3(c+padding+c_2,IV): ",h_3)
    if h_3==h_2:
        print("Success!")
    else:
        print("Fales!")
